// Generated by gencpp from file ros_self_driving_car/ActuatorsData.msg
// DO NOT EDIT!


#ifndef ROS_SELF_DRIVING_CAR_MESSAGE_ACTUATORSDATA_H
#define ROS_SELF_DRIVING_CAR_MESSAGE_ACTUATORSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_self_driving_car
{
template <class ContainerAllocator>
struct ActuatorsData_
{
  typedef ActuatorsData_<ContainerAllocator> Type;

  ActuatorsData_()
    : motor_cnt(0)
    , servo_cnt(0)  {
    }
  ActuatorsData_(const ContainerAllocator& _alloc)
    : motor_cnt(0)
    , servo_cnt(0)  {
  (void)_alloc;
    }



   typedef uint32_t _motor_cnt_type;
  _motor_cnt_type motor_cnt;

   typedef uint32_t _servo_cnt_type;
  _servo_cnt_type servo_cnt;





  typedef boost::shared_ptr< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorsData_

typedef ::ros_self_driving_car::ActuatorsData_<std::allocator<void> > ActuatorsData;

typedef boost::shared_ptr< ::ros_self_driving_car::ActuatorsData > ActuatorsDataPtr;
typedef boost::shared_ptr< ::ros_self_driving_car::ActuatorsData const> ActuatorsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator1> & lhs, const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator2> & rhs)
{
  return lhs.motor_cnt == rhs.motor_cnt &&
    lhs.servo_cnt == rhs.servo_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator1> & lhs, const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_self_driving_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b6ed50629e9328ed4596da02266d79d";
  }

  static const char* value(const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b6ed50629e9328eULL;
  static const uint64_t static_value2 = 0xd4596da02266d79dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_self_driving_car/ActuatorsData";
  }

  static const char* value(const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 motor_cnt\n"
"uint32 servo_cnt\n"
;
  }

  static const char* value(const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_cnt);
      stream.next(m.servo_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_self_driving_car::ActuatorsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_self_driving_car::ActuatorsData_<ContainerAllocator>& v)
  {
    s << indent << "motor_cnt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.motor_cnt);
    s << indent << "servo_cnt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.servo_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SELF_DRIVING_CAR_MESSAGE_ACTUATORSDATA_H
